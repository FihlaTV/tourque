#!/bin/bash
# sipxivr - Startup script for sipxivr

# chkconfig: 35 97 15
# description: sipxivr is a IVR subystem that uses FreeSWITCH as a media server
# processname: sipxivr

# Copyright (C) 2007 Pingtel Corp., certain elements licensed under a Contributor Agreement.
# Contributors retain copyright to elements licensed under a Contributor Agreement.
# Licensed to the User under the LGPL license.

. /etc/rc.d/init.d/functions || exit $ENOENT
. @SIPX_LIBEXECDIR@/sipx-utils.sh || { echo_failure; echo; exit $ENOENT; }

prog=sipxivr
pidfile="@SIPX_RUNDIR@/sipxivr.pid"
regex="Dprocname=sipxivr"

[ -e @SIPX_CONFDIR@/sysconfig/$prog ] && . @SIPX_CONFDIR@/sysconfig/$prog

start() {
  JavaCmd=`@SIPX_BINDIR@/sipx-config --java`
  Dependencies=`@SIPX_BINDIR@/java-dep -d @SIPX_JAVADIR@/sipXcommons @ivr_PKGS@`
  export CLASSPATH=`echo @SIPX_CONFDIR@/sipxivr @SIPX_JAVADIR@/{sipXivr,sipXopenfire/plugins}/*.jar ${Dependencies} | sed -e 's/ /:/g'`

  setJavaSslOpts

  # procname is there so cfengine can find it
  Command="$JavaCmd \
    -Dprocname=sipxivr \
    -Dconf.dir=@SIPX_CONFDIR@ \
    -Dvar.dir=@SIPX_VARDIR@ \
    -Dhazelcast.config=@SIPX_CONFDIR@/hz-config.xml \
    $JavaSslOpts \
    ${SIPXIVR_OPTS} \
    org.sipfoundry.sipxivr.SipXivrServer \
    ${@}"
      
  if [[ "$2" == "--migrate" || "$2" == "--migrateWithRemove" || "$2" == "--remove" || "$2" == "--migrateToFlat" || "$2" == "--migrateToFlatWithRemove" || "$2" == "--removeFromFlat" ]]; then
    echo -e $"Command parameters: ${@} "
    read -p "Are you sure to perform voicemail migrate and/or remove (y/n) ? " -n 1 -r
    echo    # move to a new line
    if [[ $REPLY =~ ^[Nn]$ ]]
    then
      echo "Exiting sipxivr script with no change"
      exit 0;
    fi
    checkRunningInstance @SIPXPBXUSER@ $regex > /dev/null
    Status=$?
    if [ $Status -eq 0 ]; then    
      echo -e $"sipXivr is running and voicemail migration parameter is passed - we need to stop sipxivr first: "
      stop
    fi
  fi
  
  if [ -n "${NoFork}" ] ; then
    killAnyOrphans @SIPXPBXUSER@ $regex
    runuser -s /bin/bash @SIPXPBXUSER@ -c "${Command}"
  else
    checkRunningInstance @SIPXPBXUSER@ $regex > /dev/null
    Status=$?
    [ $Status -eq 0 ] && { echo -n "$prog $runningError"; echo_failure; echo; exit $ERUNNING; }

    echo -n $"Starting $prog: "
    runuser -s /bin/bash @SIPXPBXUSER@ -c "${Command}" >/dev/null 2>&1 &
    echo $! > ${pidfile}

    if [ $# -gt 1 ]; then
      #check if process was spawned
      checkRunningInstanceTimeout @SIPXPBXUSER@ $regex
      Status=$?
      [ $Status -eq 0 ] || { echo_failure; echo; exit $ESRCH; }
      pid=`ps -u @SIPXPBXUSER@ -o pid,args | grep $regex | grep -v "grep" | awk '{print $1 }'`
      checkIfListening $pid
      Status=$?
      [ $Status -eq 0 ] || { echo_failure; echo; exit $ENOSCKT; }
      [ $Status -eq 0 ] && { echo_success; echo; }
    else
      echo_success; echo;
    fi
  fi
}

stop() {
  echo -n $"Stopping $prog: "
  killAnyOrphans @SIPXPBXUSER@ $regex
  checkRunningInstance @SIPXPBXUSER@ $regex > /dev/null
  Status=$?
  [ $Status -eq 0 ] && { echo_failure; echo; exit $ERUNNING; }
  [ $Status -eq 0 ] || { echo_success; echo; }
}

restart() {
  stop
  start $withCheck
}

asyncrestart() {
  stop
  start
}

configtest() {
  sipx_config_exists @SIPX_CONFDIR@/sipxivr.properties
  Status=$(($Status+$?))

  # check validity of xml files
  @bindir@/sipx-validate-xml @SIPX_CONFDIR@/autoattendants.xml
  Status=$(($Status+$?))

  # Check that the log file is writable.
  logfile="@SIPX_LOGDIR@/sipxivr.log"
  if [ -e $logfile -a ! -w $logfile ]
  then
      echo "Log file '$logfile' exists but is not writable." >&2
      Status=$ENOTWRITABLE
  fi
}

case "$1" in
  nofork)
    NoFork=1
    start
    ;;
  start)
    start ${@} $withCheck
    ;;
  stop)
    stop
    ;;
  restart|reload|force-reload)
    restart
    ;;
  asyncrestart)
    asyncrestart
    ;;
  condrestart)
    checkRunningInstance @SIPXPBXUSER@ $regex > /dev/null
    Status=$?
    [ $Status -eq 0 ] && restart || :
    ;;
  status)
    checkRunningInstance @SIPXPBXUSER@ $regex $prog
    Status=$?
    ;;
  configtest)
    configtest
    ;;
  *)
    echo "Usage: $0 {start|stop|status|restart|asyncrestart|reload|force-reload|condrestart|nofork}"
    Status=$EINCORRECTUSAGE
esac

exit $Status
